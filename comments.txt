Agenda/Tasks:
	- Allow representing Directed Graphs
	- Implement the Wireframe
	- Read more about Spring Embedder Algorithms from the Graph Visualization Book
		. Terminate the Looping for Displaying the Graph if there are no major changes in the force on nodes (You will need maybe to keep record of the forces of the pervious 3-5 iterations) 
		. Handle the case when 2 nodes somehow overlap (this will divide by zero in your code which is OO), so instead return a very very large value for the force eg. INT_MAX
	
	- Try to have a deeper understanding of how concurrency works when drawing a Graph
	- MISC: Allow the user to move a Node around
	- MISC: Allow the user to resize the Drawing Area

Concerns:
	- The code doesn't allow nodes to exist with no edges
	- The code breaks when 2 nodes overlap
	- The code breaks when the graph have self-loops
	- The Graph Displaying Procedure takes a bit too long (Not big issue - Concurrent)
	- The readEdgeList() doesn't seem clean & DRY
	- When adding a new edge to the graph all the graph nodes are re-rendered and all the existing nodes have new random positions instead try to maintain the old graph positions

Ideas:
	- Put the code for handling user input in a separate module

Design Aspects:
	- Submodule for Graph Algorithm Visualizers
	- Think of having the following class in your code
		. Try to challenge this design choice (at the end you are always referencing one reference)
		. Will the display() methods in the Circle and Line be useful
		// handles clearning the canvas and adding elements to the canvas
		export class SvgCanvas {
			constructor() {	
			}
		}
	- Code Speed
	- Code Structure ease of understanding
	- Keep it Stupid Simple (KISS)
	- You ain't gonna need it (YAGNI)
	- DRY (Don't repeat yourself)
	- SOLID
	- Decoupled system
	- Accepting that the underlying structure of storage can change without changing the code (That violates KISS & YAGNI)
	- Separate the user interface from the code logic (Model + View)
		. optionally can have a entity in the middle between the Model & the View aka. "Controller"

